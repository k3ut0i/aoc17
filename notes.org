* Advent of Code 2017
** Perl Version [12/25]
*** DONE Day 1
#+begin_src perl :exports both :var infile='inputs/day1'
  use lib 'lib';
  use Day1;
  open my $fh, '<', $infile
    or die "Could not open file $infile: $!\n";
  chomp(my $str = <$fh>);
  [Day1::captcha2($str), Day1::captcha_half_way($str)];
#+end_src

#+RESULTS:
| 1047 |
|  982 |


The starting value bug was due to newline at the end of the input string.
*** DONE Day 2                                                    :mapreduce:
Simple ~mapreduce~ for an sequence of arrays.
#+begin_src perl :exports both :var infile='inputs/day2'
  use lib 'lib';
  use Day2;
  [ Day2::crunch_spreadsheet($infile,
			     \&Day2::checksum,   # map for each line
			     sub {$_[0]+$_[1]}), # reduce with plus
    Day2::crunch_spreadsheet($infile,
			     \&Day2::checksum_div,
			     sub {$_[0] + $_[1]}),
  ]

#+end_src

#+RESULTS:
| 47623 |
|   312 |

If I assume that we need both the answers, the above method of iterating in the file might be inefficient.
In the context of correct method being part2, it might be a good solution.
*** DONE Day 3
    CLOSED: [2021-01-27 Wed 10:12]
I have previously spent too long trying to arrive at a general
boundary condition for this problem. Now that I have concentrated
on it and got it right, my confustion b/w ~^~ and ~**~ as perl 
power operator lead me to get a better grip on the problem to
arrive at the conclusion that ~^~ is not the operator I was
looking for.
#+begin_src perl :exports both :var num=277678
  use lib 'lib';
  use Day3;
  # a X-Y impl
  # Day3::manhattan_dis(Day3::n_to_xy($num))
  [Day3::getdis($num), Day3::stress_test(sub {$_[0] <= $num})]
#+end_src

#+RESULTS:
|    475 |
| 279138 |

*** DONE Day 4
    CLOSED: [2021-01-27 Wed 22:32]
A simple filter.
#+begin_src perl :exports both :var infile='inputs/day4'
  use lib 'lib';
  use Day4;

  open my $fh, '<', $infile  or die "Couldn't open $infile: $!";
  my $nvalid1 = 0; my $nvalid2 = 0;
  while (<$fh>) {
    chomp; my @a = split;
    $nvalid1++ if (Day4::isvalid(\@a, sub {$_[0] eq $_[1]})) ;
    $nvalid2++ if Day4::isvalid(\@a, \&Day4::is_anagram);
  }
  [$nvalid1, $nvalid2];
#+end_src

#+RESULTS:
| 325 |
| 119 |
Wasted too much time on a bug in ~is_anagram~. Should have iterated over the union of chars in two strings.
Also ~is_anagram~ is a superset of ~eq~. Why was I dumbly checking for equality or anagram?
*** DONE Day 5                                         :processor_simulation:
    CLOSED: [2021-01-28 Fri 22:02]
Simple step simulation.
#+begin_src perl :exports both :var infile='inputs/day5'
  use lib 'lib';
  use Day5;
  use Clone 'clone';

  open my $fh, '<', $infile or die "File Error: $infile $!";
  my @jumps;
  while (<$fh>) {  chomp; push @jumps, $_; }
  my $jumps2 = clone(\@jumps);
  my $i = 0; my $nsteps1 = 0; my $nsteps2 = 0;
  while ($i < scalar @jumps) {
    $i = Day5::step_inst(\@jumps, $i, sub {$_[0]+1}); $nsteps1++;
  }
  $i = 0;
  while ($i < scalar @jumps) {
    $i = Day5::step_inst($jumps2, $i, sub {$_[0] >= 3 ? ($_[0]-1) : ($_[0]+1)});
    $nsteps2++;
  }
  [$nsteps1,$nsteps2];
#+end_src

#+RESULTS:
|   360603 |
| 25347697 |

Bug Fixed: I stupidly cloned a zero array. I would have caught it earlier if I just used ~$i < scalar @$jumps2~ in the second while loop.
*** DONE Day 6
    CLOSED: [2021-01-31 Sun 17:29]
Iterative simulation. I used a hash for fast state lookup. State is converted to a string to work with a hash.
#+begin_src perl :exports both :var infile='inputs/day6'
  use lib 'lib';
  use Day6;
  sub run {
    open my $fh, '<', $_[0] or die "File $infile: $!";
    chomp(my $inline = <$fh>);
    my @state = split(/\s+/, $inline);
    my $state_str = join(':', @state);
    my %seen; my $step_num = 0;

    until (defined $seen{$state_str}) {
      $seen{$state_str} = $step_num;
      Day6::step_redist_x(\@state);
      $state_str = join(':', @state);
      $step_num++;
    }
    return [$step_num, $step_num - $seen{$state_str}]
  }

  run($infile);
#+end_src

#+RESULTS:
| 12841 |
|  8038 |
*** DONE Day 7                                                :graph_network:
    CLOSED: [2021-02-03 Wed 11:36]
I always struggle to write tree recursive code iteratively.
- For part one, I just calculated a node with no parents.
- For the second part, if the network is constructed completely, traverse from the root node by choosing the node with different weight than the others. We will reach a node that has all children of the same weight. This node weight must be adjusted so that the cumulative is equal to it's siblings.  
#+begin_src perl :exports both :var infile='inputs/day7' :results output raw
  use lib 'lib';
  use Day7;
  open my $fh, '<', $infile or die "File error $infile: $!";
  my @lines;
  for (<$fh>) {
    chomp; push @lines, $_;
  }
  # simple way to find a root
  # my $root = Day7::find_root(\@lines);
  my ($network, $roots) = Day7::create_network(\@lines);
  my ($error_node, $error_correction) = Day7::find_error_node($network, $roots->[0]);
  die "Undefined Error node" unless defined $error_node;
  my $dotfile = 'outputs/day7.dot'; my $img = 'outputs/day7.jpg';
  Day7::write_network_graphviz($network, $dotfile, [$error_node]);
  print <<OUT;
  : Root node is $roots->[0]
  : Error node is $error_node with new weight ${\ ($network->{$error_node}{weight} - $error_correction)}
  OUT
  print "A Radial Visualization of this network: error node in red.\n[[file:$img]]\n"
    unless system(qq(twopi -Tjpg -o $img $dotfile))
#+end_src

#+RESULTS:
: Root node is svugo
: Error node is sphbbz with new weight 1152
A Radial Visualization of this network: error node in red.
[[file:outputs/day7.jpg]]
*** DONE Day 8                                         :processor_simulation:
    CLOSED: [2021-02-06 Sat 12:30]
Simple simulation of a sequence of conditional evaluations.
#+begin_src perl :exports both :var infile='inputs/day8'
  use lib 'lib';
  use Day8;
  use List::Util qw(max);

  open my $fh, '<', $infile or die "File error $infile: $!";
  my %context = (); my $max_ever = 0;
  while (<$fh>) {
    chomp; next unless $_;
    my @inst = Day8::parse_inst($_);
    my $val = Day8::eval_inst(\@inst, \%context);
    $max_ever = $val if defined $val and $val > $max_ever;
  }

  [(max values %context), $max_ever];
#+end_src

#+RESULTS:
| 6828 |
| 7234 |
*** DONE Day 9                                                      :parsing:
    CLOSED: [2021-02-06 Sat 13:25]
A Simple Parsing Problem
#+begin_src perl :exports both :var infile='inputs/day9'
  use lib 'lib';
  use Day9;

  open my $fh, '<', $infile or die "File error $infile: $!";
  chomp(my $line = <$fh>);
  my ($score, $garbage) = Day9::score_stream($line);
  [$score, $garbage]
#+end_src

#+RESULTS:
| 14421 |
|  6817 |
*** DONE Day 10
    CLOSED: [2021-02-09 Tue 09:47]
A simulation of operation on circular list which is implemented as an array.
#+begin_src perl :exports both :var infile='inputs/day10'
  use lib 'lib';
  use Day10;

  open my $fh, '<', $infile or die "File error $infile: $!";
  chomp(my $line = <$fh>);
  my @lengths = split /,/, $line;

  my $a = [0 .. 255]; my $pos = 0; my $skip = 0;
  for my $len (@lengths) {
    ($a, $pos, $skip) = Day10::step_sim($a, $pos, $skip, $len);
  }
  my $part1 = $a->[0] * $a->[1];
  my $part2 = Day10::densehash($line);
  [$part1, $part2];
#+end_src

#+RESULTS:
|                              826 |
| d067d3f14d07e09c2e7308c3926605c4 |

*** PAUS Day 11
    - Note taken on [2021-02-09 Tue 11:30] \\
      I tried two different ways to solve part 2 and still got the same wrong answer.
I solved something similar to this previously using *APL* in /AOC20/. I used complex numbers to actually trace the whole path and thus arrive at final point. I will try a different approach here. Vector addition is commutative and associative. Hence, however this sequence of steps is ordered the final point is the same. So we can do a lot of reduction, by canceling out opposites and loops. Final irreducible quantity is the answer required. 
#+begin_src perl :exports both :results output :var infile='inputs/day11'
  use lib 'lib';
  use Day11;
  use Data::Dumper;

  open my $fh, '<', $infile or die "File Error $infile: $!";
  chomp(my $line = <$fh>);
  my ($reduction, $max_reduction, $max_dis, $max_step, $dis, $step) = Day11::distance($line);
  print Dumper($reduction); print Dumper($max_reduction);
  print "maximum distance is $max_dis at $max_step\n";
  print "final distance is $dis at $step\n";
#+end_src

#+RESULTS:
#+begin_example
$VAR1 = {
          'ne' => -447,
          'nw' => -31,
          'n' => -387
        };
$VAR1 = {
          's' => 1627,
          'sw' => 1398,
          'ne' => 663,
          'n' => 796,
          'se' => 1298,
          'nw' => 1003
        };
maximum distance is -381.051177665151-1346i at 6784
final distance is -360.266567974325-626i at 8223
#+end_example
We can see by the above reduction, that the direction will be b/w southwest and south . Since SW and SE reduce to one S, we can just ignore that 31 and ~387+447~ will give the answer to the first part.
For the second part we can see that the furthest point is also southwest. If we take 440 steps SW and 1126 steps S, we will be at the maximum distance.
I even tried reduction method from the first part, still get the same answer 1566 steps. Why isn't this the correct answer?
*** DONE Day 12
    CLOSED: [2021-02-19 Fri 08:50]
Transitive closure of a network. Finding the full closure network is too expensive. I should just find the closure for one node.
#+begin_src perl :exports both :var infile='inputs/day12'
  use lib 'lib';
  use Day12;
  use List::Util qw(uniq);
  open my $fh, '<', $infile or die "File error $infile: $!";
  my @lines = ();
  for (<$fh>) {
    chomp; push @lines, $_;
  }
  my $n = Day12::create_network(\@lines);
  Day12::transitive_closure($n);
  my $group_zero = scalar @{$n->{0}};
  my $tree_data = Day12::trees($n);
  my $num_trees = uniq (values %$tree_data);
  [$group_zero, $num_trees]
#+end_src

#+RESULTS:
| 283 |
| 195 |

*** DONE Day 13
    CLOSED: [2021-05-16 Sun 13:12]
    - Note taken on [2021-05-08 Sat 13:56] \\
      I seem to have a bad habit of doing straight forward simulations, rather than actually thing about the underlying problem. This problem can be formulated by simple arithmetic and iterating over layers, but I did not even give it a thought until the second part gave me trouble.
    - Note taken on [2021-02-19 Fri 21:58] \\
      inefficient brute force search for part 2
Simulation
#+begin_src perl :exports both :var infile='inputs/day13'
  use lib 'lib';
  use Day13;
  use Clone qw(clone);
  open my $fh, '<', $infile or die "File error $infile: $!";
  my @lines;
  for (<$fh>) {
    chomp; push @lines, $_;
  }
  my $init_state = Day13::read_init_state(\@lines);
  my $result1_direct = Day13::severity($init_state);
  my $state1 = clone($init_state);
  my $caught = Day13::simulate_part1($state1);
  my $result1 = 0;
  for (keys %$caught) {
    $result1 += $state1->{$_}{depth} * $_;
  }

  [$result1_direct, Day13::find_delay_direct($init_state)];
#+end_src

#+RESULTS:
|    1624 |
| 3923436 |

There is a lot of extra code that modeled the simulation.
*** TODO Day 14
Map reduce using day 10 hash functions.
    #+begin_src perl
      use strict;
      use warnings;
      use lib 'lib';
      use Day14;

      my $key = "uugsqrei";
      [Day14::full_sim($key)];
    #+end_src

    #+RESULTS:
    | 8194 |
    | 1141 |
The second part seems to be a kind of coloring problem. In /Paint/ program there was a coloring tool which marked all the connected regions to the same color. Now how do I mark a whole region?
*** TODO Day 15
*** TODO Day 16
*** TODO Day 17
*** TODO Day 18
*** TODO Day 19
*** TODO Day 20
*** TODO Day 21
*** TODO Day 22
*** TODO Day 23
*** TODO Day 24
*** TODO Day 25


** Agda Version
*** Day 1
 Even the basic IO is so convoluted that to run a hello world program it compiles 130 modules. There are a lot of utilities not defined here. I am trying to define a read-number function from a string. Haven't used this in the problem.

 Got stuck trying to destruct on equality of two characters.  By luck found out about ~Data.Char.≈?~ which is the decidable instance of character equality. So I have partly solved the first part of the problem. I did not compare the last and first characters of the input in the program, So I have checked it manually (and added 8) which gave me the correct answer.
    #+begin_src sh :exports results :results output verbatim
      cd src/
      ./day1
    #+end_src

    #+RESULTS:
    : 1039
    : 952

 Completed the second part too, using ~splitAt~ function and rotating the list in half. I am only tripping up at IO and using Coinduction with INFINITY, SHARP and FLAT constructors. Need more familiarity with all of these.
*** Day 2
 I need to get more familiar using generic abstractions. I keep writing small utilities which probably can be built simply using stdlib.

 #+begin_src sh :exports results :results output verbatim
   cd src/
   ./day2
 #+end_src

 #+RESULTS:
 : 47623
 : 312
